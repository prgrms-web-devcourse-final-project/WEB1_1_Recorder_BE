services:
  mysql:
    image: mysql:8
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: revup
      MYSQL_USER: docker_test
      MYSQL_PASSWORD: 1234
    ports:
      - "3306:3306"
    deploy:
      resources:
        limits:
          memory: 256M  # MySQL에 할당할 최대 메모리 (1GB에서 256MB 제한)
          cpus: '0.5'   # 50% CPU 제한
        reservations:
          memory: 128M  # 최소 메모리 예약 (필요할 때 자동으로 할당)


  spring-boot-app:
    build:
      context: . # Dockerfile 이 있는 위치
      dockerfile: Dockerfile
    image: mw0677/revup:latest
    container_name: spring-boot-container
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - redis_container
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/revup?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: docker_test
      SPRING_DATASOURCE_PASSWORD: 1234
    deploy:
      resources:
        limits:
          memory: 256M  # Spring Boot 애플리케이션에 할당할 최대 메모리
          cpus: '0.5'   # 50% CPU 제한
        reservations:
          memory: 128M  # 최소 메모리 예약
    entrypoint: [ "./wait-for-it.sh", "mysql:3306", "--", "java", "-Dspring.profiles.active=local", "-jar", "/app.jar" ]

  redis_container:
    image: redis:latest
    # 컨테이너명
    container_name: redis-container
    # 접근 포트 설정(컨테이너 외부:컨테이너 내부)
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
    # 컨테이너에 docker label을 이용해서 메타데이터 추가
    labels:
      - "name=redis"
      - "mode=standalone"
    # 컨테이너 종료시 재시작 여부 설정
    restart: always
    command: redis-server /usr/local/conf/redis.conf
    deploy:
      resources:
        limits:
          memory: 128M  # Redis에 할당할 최대 메모리
          cpus: '0.25'  # Redis는 CPU 자원을 적게 사용하도록 제한
        reservations:
          memory: 64M  # 최소 메모리 예약
